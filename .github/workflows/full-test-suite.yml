name: Full Test Suite
run-name: All Tests
on:
  push:
env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true

jobs:

  Build:
    name: Build binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Build CVRP binary
        run: dotnet build -c Release -o bin --nologo src/CVRP/CVRP.csproj
      - name: Upload binary artefact
        uses: actions/upload-artifact@v3
        with:
          name: build-binary
          path: bin

  GetCVRPControllerGraphs:
    name: Detect CVRPController Graph files
    outputs:
      files: ${{ steps.get_files.outputs.files }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Get Graph files
        id: get_files
        run: |
          echo -n "files=" >> $GITHUB_OUTPUT && \
          find vendor/test/CVRPController/ -name "*.vrp" | \
            while read file; do echo "\"$file\""; done | \
            jq -sc "." \
            >> $GITHUB_OUTPUT

  GetTSPLIB95Graphs:
    name: Detect TSPLIB95 Graph files
    outputs:
      files: ${{ steps.get_files.outputs.files }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Get Graph files
        id: get_files
        run: |
          echo -n "files=" >> $GITHUB_OUTPUT && \
          find data/TSPLIB95/vrp/ -name "*.vrp" | \
            while read file; do echo "\"$file\""; done | \
            jq -sc "." \
            >> $GITHUB_OUTPUT

  TestParsing_CVRPController:
    name: |
      Test graph file parsing: ${{ matrix.file }}
    needs:
      - Build
      - GetCVRPControllerGraphs
    strategy:
      matrix:
        file: ${{ fromJSON(needs.GetCVRPControllerGraphs.outputs.files) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Download Binary
        uses: actions/download-artifact@v3
        continue-on-error: false
        with:
          name: build-binary
          path: bin
      - name: Make binary executable
        run: chmod +x bin/CVRP
      - name: Run test
        run: bin/CVRP parse-graph-and-output "${{ matrix.file }}"

  TestParsing_TSPLIB95:
    name: |
      Test graph file parsing: ${{ matrix.file }}
    needs:
      - Build
      - GetTSPLIB95Graphs
    strategy:
      matrix:
        file: ${{ fromJSON(needs.GetTSPLIB95Graphs.outputs.files) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Download Binary
        uses: actions/download-artifact@v3
        continue-on-error: false
        with:
          name: build-binary
          path: bin
      - name: Make binary executable
        run: chmod +x bin/CVRP
      - name: Run test
        run: bin/CVRP parse-graph-and-output "${{ matrix.file }}"

  GetSolutionFiles:
    name: Detect Solution files
    outputs:
      files: ${{ steps.get_files.outputs.files }}
      arnold_files: ${{ steps.get_arnold_files.outputs.files }}
      graph_for_sols: ${{ steps.graph_for_sols.outputs.files }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Get Solution files
        id: get_files
        run: |
          echo -n "files=" >> $GITHUB_OUTPUT && \
          find data -name "*.sol" | \
            while read file; do echo "\"$file\""; done | \
            jq -sc "." \
            >> $GITHUB_OUTPUT
      - name: Get CVRPLIB Arnold Solution files
        id: get_arnold_files
        run: |
          echo -n "files=" >> $GITHUB_OUTPUT && \
          find data/CVRPLIB/Arnold -name "*.sol" | \
            while read file; do echo "\"$file\""; done | \
            jq -sc "." \
            >> $GITHUB_OUTPUT
      - name: Get Problem files from existing solution
        id: graph_for_sols
        run: |
          echo -n "files=" >> $GITHUB_OUTPUT && \
          find data/CVRPLIB -name "*.sol" | \
            xargs -I {} basename {} .sol | \
            xargs -I {} find vendor/test/CVRPController -name "{}.vrp" | \
            while read file; do echo "\"$file\""; done | \
            jq -sc "." \
            >> $GITHUB_OUTPUT

  TestParsing_SolutionFile:
    name: |
      Test sol file parsing: ${{ matrix.file }}
    needs:
      - Build
      - GetSolutionFiles
    strategy:
      matrix:
        file: ${{ fromJSON(needs.GetSolutionFiles.outputs.files) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Download Binary
        uses: actions/download-artifact@v3
        continue-on-error: false
        with:
          name: build-binary
          path: bin
      - name: Make binary executable
        run: chmod +x bin/CVRP
      - name: Run test
        run: bin/CVRP parse-sol-and-output "${{ matrix.file }}"

  TestSolValidation:
    name: |
      Test Validate Solution: ${{ matrix.file }}
    needs:
      # data dependency
      - Build
      - GetSolutionFiles
      # logical dependency
      - TestParsing_CVRPController
      - TestParsing_TSPLIB95
      - TestParsing_SolutionFile
    strategy:
      matrix:
        file: ${{ fromJSON(needs.GetSolutionFiles.outputs.arnold_files) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Download Binary
        uses: actions/download-artifact@v3
        continue-on-error: false
        with:
          name: build-binary
          path: bin
      - name: Make binary executable
        run: chmod +x bin/CVRP
      - name: Run test
        run: |
          bin/CVRP validate-sol \
            "vendor/test/CVRPController/InstancesRounded/$(basename "${{ matrix.file }}" ".sol").vrp" \
            "${{ matrix.file }}"

  DotnetTest:
    name: Execute Dotnet test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Execute dotnet test
        run: dotnet test -e "TEST_DATA=$(pwd)/../data"
        working-directory: src
      - name: Upload test artefacts
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: |
            src/Test/TestResults

  ExecuteSolver:
    name: Execute Solver ${{ matrix.solver }} with ${{ matrix.file }}
    runs-on: ubuntu-latest
    needs:
      # data dependency
      - Build
      - GetSolutionFiles
      # logical dependency
      - TestParsing_CVRPController
      - TestParsing_TSPLIB95
      - TestSolValidation
    strategy:
      matrix:
        file: ${{ fromJSON(needs.GetSolutionFiles.outputs.graph_for_sols) }}
        solver:
          - greedy-simple
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Download Binary
        uses: actions/download-artifact@v3
        continue-on-error: false
        with:
          name: build-binary
          path: bin
      - name: Make binary executable
        run: chmod +x bin/CVRP
      - name: Run test
        run: |
          bin/CVRP solve \
            -s "${{ matrix.solver }}" \
            -m "metrics/$(basename ${{ matrix.file }} .vrp).json" \
            "${{ matrix.file }}" \
            | tee "${{ matrix.file }}.sol"
      - name: Validate test
        run: |
          bin/CVRP validate-sol \
            "${{ matrix.file }}" \
            "${{ matrix.file }}.sol"
      - name: Upload metrics
        uses: actions/upload-artifact@v3
        with:
          name: solver-metrics
          path: |
            metrics

  Benchmark:
    name: Execute Benchmark
    runs-on: ubuntu-latest
    needs:
      # data dependency
      - Build
      # logical dependency
      - TestParsing_CVRPController
      - TestParsing_TSPLIB95
      - ExecuteSolver
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Download Binary
        uses: actions/download-artifact@v3
        continue-on-error: false
        with:
          name: build-binary
          path: bin
      - name: Make binary executable
        run: chmod +x bin/CVRP
      - name: Move problem files
        run: |
          mkdir problems && \
          find vendor/test -name "*.vrp" | xargs -I {} cp "{}" problems/
      - name: Run test
        run: |
          bin/CVRP benchmark \
            -i "problems" \
            -m "metrics" \
            -c 1
      - name: Upload metrics
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-metrics
          path: |
            metrics
